// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import form "github.com/moemoe89/practicing-mongodb-golang/api/api_struct/form"
import mock "github.com/stretchr/testify/mock"
import model "github.com/moemoe89/practicing-mongodb-golang/api/api_struct/model"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *Service) Create(user *form.UserForm) (*model.UserModel, int, error) {
	ret := _m.Called(user)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(*form.UserForm) *model.UserModel); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*form.UserForm) int); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*form.UserForm) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id string) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields:
func (_m *Service) Find() ([]*model.UserModel, int, error) {
	ret := _m.Called()

	var r0 []*model.UserModel
	if rf, ok := ret.Get(0).(func() []*model.UserModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: id
func (_m *Service) FindByID(id string) (*model.UserModel, int, error) {
	ret := _m.Called(id)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(string) *model.UserModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: user, id
func (_m *Service) Update(user *form.UserForm, id string) (*model.UserModel, int, error) {
	ret := _m.Called(user, id)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(*form.UserForm, string) *model.UserModel); ok {
		r0 = rf(user, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*form.UserForm, string) int); ok {
		r1 = rf(user, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*form.UserForm, string) error); ok {
		r2 = rf(user, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
